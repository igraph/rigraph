# For help debugging build failures open an issue on the RStudio community with the 'github-actions' tag.
# https://community.rstudio.com/new-topic?category=Package%20development&tags=github-actions
on:
  push:
    branches:
      - main
      - fix/*
  pull_request:
    branches:
      - main
      - fix/*
  schedule:
    - cron: '0 2 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || github.sha }}-${{ github.base_ref || '' }}
  cancel-in-progress: true

name: R-CMD-check-extra

jobs:
  coverage:
    runs-on: ubuntu-20.04

    needs: build_src_package

    name: Coverage

    env:
      RSPM: https://packagemanager.rstudio.com/cran/__linux__/focal/latest
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      MAKEFLAGS: -j2

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: apt update
        run: |
          sudo apt-get update
          sudo apt-get install -y libarpack2-dev
        shell: bash

      - name: Setup R
        uses: r-lib/actions/setup-r@v2

      - name: Setup Pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - name: Install R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          needs: coverage
          pak-version: devel

      - name: Run coverage
        run: |
          line_exclusions <- fs::dir_ls(c("src/vendor"), type = "file", recurse = TRUE)
          cov <- covr::package_coverage(
            type = c("tests", "examples"),
            line_exclusions = as.list(names(line_exclusions)),
            quiet = FALSE,
            install_path = file.path(normalizePath(Sys.getenv("RUNNER_TEMP"), winslash = "/"), "package")
           )
          covr::to_cobertura(cov)
        shell: Rscript {0}

      - uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: ${{ github.event_name != 'pull_request' && true || false }}
          file: ./cobertura.xml
          plugin: noop
          disable_search: true
          token: ${{ secrets.CODECOV_TOKEN }}

  sanitizer:
    runs-on: ubuntu-22.04

    needs: build_src_package

    name: Sanitizer

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: apt update
        run: |
          sudo apt-get update
          sudo apt-get install -y libarpack2-dev
        shell: bash

      - name: run sanitizer
        uses: addnab/docker-run-action@v3
        with:
          image: ghcr.io/krlmlr/rigraph-san:main
          options: --rm --platform linux/amd64 -v ${{ github.workspace }}:/rigraph
          run: |
            set -e
            printenv
            # Memory leaks with rgl 1.3.12, https://github.com/dmurdoch/rgl/issues/439
            RDcsan -e 'pak::pak("dmurdoch/rgl")'
            cd rigraph
            RDcsan CMD INSTALL . --no-byte-compile
            TESTTHAT_PARALLEL=false CI=true RDcsan -q -e 'testthat::test_local(reporter = c("location", "summary"), load_package = "installed")'
