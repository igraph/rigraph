% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/conversion.R
\name{as_veincidence_matrix}
\alias{as_veincidence_matrix}
\title{Convert a graph to a vertex-edge incidence matrix}
\usage{
as_veincidence_matrix(
  graph,
  types = deprecated(),
  attr = NULL,
  names = TRUE,
  sparse = igraph_opt("sparsematrices")
)
}
\arguments{
\item{graph}{The input graph.}

\item{types}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}} This argument is deprecated
and not used. It was originally intended for compatibility but vertex-edge
incidence matrices don't use types.}

\item{attr}{Either \code{NULL} or a character string giving an edge attribute name.
If \code{NULL}, unweighted incidence is returned (values are -1, 0, 1 for directed
graphs and 0, 1, 2 for undirected graphs). If not \code{NULL}, weighted incidence
is returned using the specified edge attribute as weights. For directed graphs,
values are -w, 0, w where w is the weight. For undirected graphs, values are
0, w, 2w.}

\item{names}{Logical scalar, whether to add vertex and edge names to the matrix.
If \code{TRUE} (default), vertex names are used for row names if the \code{name}
vertex attribute exists, and edge labels are used for column names if
the \code{label} edge attribute exists. Vertex and edge IDs are used otherwise.}

\item{sparse}{Logical scalar, whether to return a sparse matrix. The
\sQuote{\code{Matrix}} package must be installed for creating sparse matrices.}
}
\value{
A (usually sparse) matrix with \code{vcount(graph)} rows and
\code{ecount(graph)} columns.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
}
\details{
\code{as_veincidence_matrix()} returns the vertex-edge incidence matrix of a graph.

The vertex-edge incidence matrix is a matrix where rows correspond to vertices
and columns correspond to edges. For undirected graphs, the matrix element
is 1 if the vertex is incident to the edge, 0 otherwise. For directed graphs,
the element is -1 if the vertex is the tail (source) of the edge, +1 if it is
the head (target), and 0 otherwise.

For loops (edges connecting a vertex to itself):
\itemize{
\item In undirected graphs: the incidence value is 2
\item In directed graphs: the incidence value is 0
}

When weights are used, the values -1 and +1 are replaced by -w and +w
respectively, where w is the weight of the edge.
}
\examples{
# Undirected graph
g1 <- make_ring(3, circular = FALSE)
as_veincidence_matrix(g1, sparse = FALSE)

# Directed graph
g2 <- make_ring(3, circular = FALSE, directed = TRUE)
as_veincidence_matrix(g2, sparse = FALSE)

# Weighted graph
g3 <- make_ring(3, circular = FALSE)
E(g3)$weight <- c(2, 3)
as_veincidence_matrix(g3, attr = "weight", sparse = FALSE)

# Named graph
g4 <- graph_from_literal(a-b, b-c, c-d)
E(g4)$label <- paste0("e", seq_len(ecount(g4)))
as_veincidence_matrix(g4, sparse = FALSE)

# Graph with loop
g5 <- graph(c(1, 1, 1, 2), directed = FALSE)
as_veincidence_matrix(g5, sparse = FALSE)

}
\seealso{
\code{\link[=as_adjacency_matrix]{as_adjacency_matrix()}}, \code{\link[=as_edgelist]{as_edgelist()}}, \code{\link[=laplacian_matrix]{laplacian_matrix()}}

Other conversion: 
\code{\link{as.matrix.igraph}()},
\code{\link{as_adj_list}()},
\code{\link{as_adjacency_matrix}()},
\code{\link{as_biadjacency_matrix}()},
\code{\link{as_data_frame}()},
\code{\link{as_directed}()},
\code{\link{as_edgelist}()},
\code{\link{as_graphnel}()},
\code{\link{as_long_data_frame}()},
\code{\link{graph_from_adj_list}()},
\code{\link{graph_from_graphnel}()}
}
\concept{conversion}
\concept{matrices}
