% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/operators.R
\name{mycielskian}
\alias{mycielskian}
\title{Mycielski transformation of a graph}
\usage{
mycielskian(graph, k = 1)
}
\arguments{
\item{graph}{The input graph.}

\item{k}{Integer, the number of Mycielski iterations to perform (must be
non-negative).}
}
\value{
An igraph graph object.
}
\description{
The Mycielskian of a graph is a larger graph formed using a construction due
to Jan Mycielski that increases the chromatic number by one while preserving
the triangle-free property.
The Mycielski construction can be used to create triangle-free graphs with an
arbitrarily large chromatic number.
}
\details{
Let the \code{n} vertices of the given graph \code{G} be v_1, ..., v_n.
The Mycielskian of \code{G}, denoted M(G), contains \code{G} itself as a subgraph,
together with \code{n+1} additional vertices:
\itemize{
\item A vertex u_i corresponding to each vertex v_i of \code{G}.
\item An extra vertex w.
}

The edges are added as follows:
\itemize{
\item Each vertex u_i is connected to w, forming a star.
\item For each edge (v_i, v_j) in \code{G}, two new edges are added:
(u_i, v_j) and (v_i, u_j).
}

Thus, if \code{G} has \code{n} vertices and \code{m} edges, the Mycielskian M(G) has
\verb{2n + 1} vertices, and \verb{3m + n} edges.

This function can apply the Mycielski transformation an arbitrary number of
times, controlled by the parameter \code{k}. The k-th iterated Mycielskian has
\code{n_k = (n + 1) * 2^k - 1} vertices and
\verb{m_k = ((2m + 2n + 1) * 3^k - n_\{k+1\}) / 2} edges, where \code{n} and \code{m} are the
vertex and edge count of the original graph, respectively.
}
\examples{
# Create a Mycielskian of a triangle
g <- make_full_graph(3)
mg <- mycielskian(g, 1)
print_all(mg)
vcount(mg)  # Should be 2*3 + 1 = 7
ecount(mg)  # Should be 3*3 + 3 = 12

# Two iterations of the Mycielski transformation
g <- make_ring(5)
mg <- mycielskian(g, 2)
vcount(mg)
ecount(mg)
}
\seealso{
\code{\link[=make_mycielski_graph]{make_mycielski_graph()}} for creating Mycielski graphs directly

Other functions for manipulating graph structure: 
\code{\link{+.igraph}()},
\code{\link{add_edges}()},
\code{\link{add_vertices}()},
\code{\link{complementer}()},
\code{\link{compose}()},
\code{\link{connect}()},
\code{\link{contract}()},
\code{\link{delete_edges}()},
\code{\link{delete_vertices}()},
\code{\link{difference}()},
\code{\link{difference.igraph}()},
\code{\link{disjoint_union}()},
\code{\link{edge}()},
\code{\link{igraph-minus}},
\code{\link{intersection}()},
\code{\link{intersection.igraph}()},
\code{\link{path}()},
\code{\link{permute}()},
\code{\link{rep.igraph}()},
\code{\link{reverse_edges}()},
\code{\link{simplify}()},
\code{\link{union}()},
\code{\link{union.igraph}()},
\code{\link{vertex}()}
}
\concept{functions for manipulating graph structure}
