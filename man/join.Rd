% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/operators.R
\name{join}
\alias{join}
\alias{\%j\%}
\title{Join of two graphs}
\usage{
join(g1, g2)

x \%j\% y
}
\arguments{
\item{g1, g2}{Graph objects.}
}
\value{
A new graph object.
}
\description{
The join of two graphs is created by connecting all vertices from
the first graph to all vertices in the second graph.
}
\details{
\code{join()} creates the join of two graphs. The graphs must be disjoint,
i.e., have distinct vertex sets. First the vertices of the second graph will
be relabeled with new vertex IDs, then the union of the two graphs is formed.
Finally, all vertices from the first graph will be connected to all vertices
from the second graph. If the two graphs have |V1| and |V2| vertices and
|E1| and |E2| edges respectively, then the new graph will have |V1|+|V2|
vertices and |E1|+|E2|+|V1|*|V2| edges. This function can also be used via
the \verb{\%j\%} operator.

The vertex ordering of the graphs is preserved. In other words, the vertex
IDs of the first graph map to identical values in the new graph, while the
vertex IDs of the second graph map to IDs incremented by the vertex count
of the first graph.

Both graphs need to have the same directedness, i.e. either both directed or
both undirected. If both graphs are directed, then for each pair of vertices
v, u in graphs G1, G2 we add edges (v, u) and (u, v) to maintain completeness.

Note that the current version of this function cannot handle graph, vertex
and edge attributes; they will be lost in the result.

An error is generated if some input graphs are directed and others are
undirected.
}
\examples{

## A star and a ring
g1 <- make_star(10, mode = "undirected")
g2 <- make_ring(5)
print_all(g1 \%j\% g2)
}
\seealso{
Other functions for manipulating graph structure: 
\code{\link{+.igraph}()},
\code{\link{add_edges}()},
\code{\link{add_vertices}()},
\code{\link{complementer}()},
\code{\link{compose}()},
\code{\link{connect}()},
\code{\link{contract}()},
\code{\link{delete_edges}()},
\code{\link{delete_vertices}()},
\code{\link{difference}()},
\code{\link{difference.igraph}()},
\code{\link{disjoint_union}()},
\code{\link{edge}()},
\code{\link{igraph-minus}},
\code{\link{intersection}()},
\code{\link{intersection.igraph}()},
\code{\link{path}()},
\code{\link{permute}()},
\code{\link{rep.igraph}()},
\code{\link{reverse_edges}()},
\code{\link{simplify}()},
\code{\link{union}()},
\code{\link{union.igraph}()},
\code{\link{vertex}()}

Other functions for manipulating graph structure: 
\code{\link{+.igraph}()},
\code{\link{add_edges}()},
\code{\link{add_vertices}()},
\code{\link{complementer}()},
\code{\link{compose}()},
\code{\link{connect}()},
\code{\link{contract}()},
\code{\link{delete_edges}()},
\code{\link{delete_vertices}()},
\code{\link{difference}()},
\code{\link{difference.igraph}()},
\code{\link{disjoint_union}()},
\code{\link{edge}()},
\code{\link{igraph-minus}},
\code{\link{intersection}()},
\code{\link{intersection.igraph}()},
\code{\link{path}()},
\code{\link{permute}()},
\code{\link{rep.igraph}()},
\code{\link{reverse_edges}()},
\code{\link{simplify}()},
\code{\link{union}()},
\code{\link{union.igraph}()},
\code{\link{vertex}()}
}
\author{
Gabor Csardi \email{csardi.gabor@gmail.com}
}
\concept{functions for manipulating graph structure}
\keyword{graphs}
\section{Related documentation in the C library}{\href{https://igraph.org/c/html/latest/igraph-Operators.html#igraph_join}{\code{join()}}.}

