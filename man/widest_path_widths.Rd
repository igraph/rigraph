% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/paths.R
\name{widest_path_widths}
\alias{widest_path_widths}
\alias{widest_paths}
\title{Widest paths between vertices}
\usage{
widest_path_widths(
  graph,
  v = V(graph),
  to = V(graph),
  mode = c("all", "out", "in"),
  weights = NULL,
  algorithm = c("automatic", "dijkstra", "floyd-warshall")
)

widest_paths(
  graph,
  from,
  to = V(graph),
  mode = c("out", "all", "in"),
  weights = NULL,
  output = c("vpath", "epath", "both"),
  predecessors = FALSE,
  inbound.edges = FALSE
)
}
\arguments{
\item{graph}{The graph to work on.}

\item{v}{Numeric vector, the vertices from which the widest paths will be
calculated. This is an alias for \code{from} in \code{widest_path_widths()}.}

\item{to}{Numeric vector, the vertices to which the widest paths will be
calculated. By default it includes all vertices.}

\item{mode}{Character constant, gives whether the widest paths to or from
the given vertices should be calculated for directed graphs. If \code{out}
then the widest paths \emph{from} the vertex, if \verb{in} then \emph{to}
it will be considered. If \code{all}, the default, then the graph is treated
as undirected, i.e. edge directions are not taken into account. This
argument is ignored for undirected graphs.}

\item{weights}{A numeric vector giving edge weights (interpreted as widths).
If this is \code{NULL} and the graph has a \code{weight} edge attribute, then the
attribute is used. Widest path functions require edge weights, so if no
\code{weight} attribute exists and \code{weights} is not provided, an error is raised.
In a weighted graph, the width of a path is the minimum weight along the path.}

\item{algorithm}{Which algorithm to use for the calculation. By default
igraph selects automatically between Dijkstra's algorithm and Floyd-Warshall.
For sparse graphs, Dijkstra is faster; for dense graphs, Floyd-Warshall is faster.
You can override igraph's choice by explicitly giving this parameter.}

\item{from}{The source vertex for \code{widest_paths()}, or a set of source vertices
for \code{widest_path_widths()}.}

\item{output}{Character scalar, defines how to report the widest paths for \code{widest_paths()}.
\dQuote{vpath} means that the vertices along the paths are reported,
\dQuote{epath} means that the edges along the paths are reported.
\dQuote{both} means that both forms are returned, in a named list with components
\dQuote{vpath} and \dQuote{epath}.}

\item{predecessors}{Logical scalar, whether to return the predecessor vertex
for each vertex. The predecessor of vertex \code{i} in the tree is the
vertex from which vertex \code{i} was reached. The predecessor of the start
vertex (in the \code{from} argument) is -1. If the predecessor is -2, it means
that the given vertex was not reached from the source during the search.
Note that the search terminates if all the vertices in \code{to} are reached.}

\item{inbound.edges}{Logical scalar, whether to return the inbound edge for
each vertex. The inbound edge of vertex \code{i} in the tree is the edge via
which vertex \code{i} was reached. The start vertex and vertices that were
not reached during the search will have -1 in the corresponding entry of
the vector. Note that the search terminates if all the vertices in \code{to}
are reached.}
}
\value{
For \code{widest_path_widths()} a numeric matrix with \code{length(to)}
columns and \code{length(from)} rows. The widest path width from a vertex to
itself is \code{Inf}. For unreachable vertices \code{-Inf} is included.

For \code{widest_paths()} a named list is returned:
\describe{
\item{vpath}{
A list of length \code{length(to)}. List element \code{i} contains the vertex ids on
the path from vertex \code{from} to vertex \code{to[i]} (or the other way for directed
graphs depending on the \code{mode} argument).
The vector also contains \code{from} and \code{to[i]} as the first and last elements.
If \code{from} is the same as \code{to[i]} then it is only included once.
If there is no path between two vertices then a numeric vector of length zero is
returned as the list element.
If this output is not requested in the \code{output} argument, then it will be \code{NULL}.
}
\item{epath}{
A list similar to \code{vpath}, but the vectors contain the edge ids along the widest
paths, instead of the vertex ids. This entry is set to \code{NULL} if it is not
requested in the \code{output} argument.
}
\item{predecessors}{
Numeric vector, the predecessor of each vertex, or \code{NULL} if it was not requested.
}
\item{inbound_edges}{
Numeric vector, the inbound edge for each vertex, or \code{NULL}, if it was not requested.
}
}
}
\description{
\code{widest_path_widths()} calculates the widths of all the widest paths from
or to the vertices in the network.
\code{widest_paths()} calculates one widest path (the path itself, and not just its width) from or to the
given vertex.
}
\details{
The widest path between two vertices is the path with the maximum bottleneck width,
where the bottleneck width is defined as the minimum edge weight along the path.
The functions documented in this manual page all calculate widest paths between vertex pairs.

\code{widest_path_widths()} calculates the widths of pairwise widest paths from
a set of vertices (\code{from}) to another set of vertices (\code{to}).
It uses different algorithms, depending on the \code{algorithm} argument.
The implemented algorithms are Dijkstra's algorithm (\sQuote{\code{dijkstra}}),
which is faster for sparse graphs, and the Floyd-Warshall algorithm
(\sQuote{\code{floyd-warshall}}), which is faster for dense graphs.

igraph can choose automatically between algorithms. For automatic algorithm selection,
supply \sQuote{\code{automatic}} as the \code{algorithm} argument. (This is also the default.)

\code{widest_paths()} calculates a single widest path (i.e. the path
itself, not just its width) between the source vertex given in \code{from},
to the target vertices given in \code{to}.
\code{widest_paths()} uses a modified Dijkstra's algorithm.
}
\examples{

g <- make_ring(10)
E(g)$weight <- seq_len(ecount(g))
widest_path_widths(g)
widest_paths(g, 5)

}
\seealso{
Other paths: 
\code{\link{all_simple_paths}()},
\code{\link{diameter}()},
\code{\link{distance_table}()},
\code{\link{eccentricity}()},
\code{\link{graph_center}()},
\code{\link{radius}()}
}
\author{
Gabor Csardi \email{csardi.gabor@gmail.com}
}
\concept{paths}
\keyword{graphs}
\section{Related documentation in the C library}{\href{https://igraph.org/c/html/latest/igraph-Structural.html#igraph_widest_path_widths_dijkstra}{\code{widest_path_widths_dijkstra()}}, \href{https://igraph.org/c/html/latest/igraph-Structural.html#igraph_get_widest_paths}{\code{get_widest_paths()}}.}

