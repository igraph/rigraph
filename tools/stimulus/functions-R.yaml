# vim:set ts=4 sw=4 sts=4 et:
#
# This file is a YAML representation of the R-specific parts of the function
# definitions. They are currently used by Stimulus to generate code for the
# R interface
#
# See https://github.com/igraph/stimulus for more information

#######################################
# The basic interface
#######################################

# Not needed in R, we use igraph_emtpy() instead
igraph_empty_attrs:
    IGNORE: RR, RC

igraph_add_vertices:
    IGNORE: RR, RC, RInit

igraph_delete_edges:
    IGNORE: RR, RC

igraph_delete_vertices:
    IGNORE: RR, RC

igraph_ecount:
    IGNORE: RR, RC

igraph_is_directed:
    IGNORE: RR, RC

igraph_degree:

igraph_edge:
    IGNORE: RR, RC, RInit

igraph_edges:
    IGNORE: RR, RC

igraph_get_eid:
    IGNORE: RR, RC, RInit

igraph_get_eids:
    IGNORE: RR, RC, RInit

igraph_get_all_eids_between:
    # This is a temporary hack; we need to find a way to handle default values
    # for dependencies. The problem is that the VERTEXINDEX type needs two
    # dependencies: the graph and the vertex set, but we only have the graph
    # in the argument list.
    DEPS: from ON graph, to ON graph, eids ON graph

igraph_incident:
    IGNORE: RR, RC

igraph_is_same_graph:
    IGNORE: RR, RC, RInit
    # Not needed in R; we can simply compare things in the R layer without
    # calling into C

igraph_create:
    IGNORE: RR, RC

#######################################
# Constructors, deterministic
#######################################

# TODO: temporarily disabled
igraph_adjacency:
    IGNORE: RR

# TODO: temporarily disabled
igraph_sparse_adjacency:
    IGNORE: RR, RC

# TODO: temporarily disabled
igraph_sparse_weighted_adjacency:
    IGNORE: RR, RC

# TODO: temporarily disabled
igraph_weighted_adjacency:
    IGNORE: RR

igraph_star:
    IGNORE: RR, RC

igraph_ring:
    IGNORE: RR, RC

igraph_kary_tree:
    IGNORE: RR, RC

igraph_full:
    IGNORE: RR, RC

igraph_connect_neighborhood:
    IGNORE: RR, RC

igraph_famous:
    IGNORE: RR, RC

igraph_lcf_vector:
    R:
      GATTR:
        name: LCF graph

igraph_realize_degree_sequence:
    PARAMS: |-
        OUT GRAPH graph, VECTOR_INT out_deg, OPTIONAL VECTOR_INT in_deg,
        EDGE_TYPE_SW allowed_edge_types=SIMPLE, REALIZE_DEGSEQ_METHOD method=SMALLEST
    R:
      GATTR:
        name: Graph from degree sequence
      GATTR-PARAM: out_deg, in_deg, allowed_edge_types, method

igraph_realize_bipartite_degree_sequence:
    R:
      GATTR:
        name: Bipartite graph from degree sequence
      GATTR-PARAM: degrees1, degrees2, allowed_edge_types, method

# TODO: temporarily disabled
igraph_weighted_sparsemat:
    IGNORE: RR, RC

#######################################
# Constructors, games
#######################################

igraph_barabasi_game:
    IGNORE: RR, RC

igraph_degree_sequence_game:
    IGNORE: RR, RC

igraph_growing_random_game:
    PARAMS: |-
        OUT GRAPH graph, INTEGER n, INTEGER m=1, *,
        BOOLEAN directed=True, BOOLEAN citation=False
    R:
        GATTR:
          name: Growing random graph
        GATTR-PARAM: m, citation

igraph_barabasi_aging_game:
    IGNORE: RR, RC

igraph_recent_degree_game:
    IGNORE: RR, RC

igraph_recent_degree_aging_game:
    IGNORE: RR, RC

igraph_callaway_traits_game:
    IGNORE: RR, RC

igraph_establishment_game:
    IGNORE: RR, RC

igraph_grg_game:
    IGNORE: RR, RC, RInit

igraph_watts_strogatz_game:
    IGNORE: RR, RC

igraph_lastcit_game:
    IGNORE: RR, RC

igraph_cited_type_game:
    IGNORE: RR, RC

igraph_citing_cited_type_game:
    IGNORE: RR, RC

igraph_forest_fire_game:
    R:
        GATTR:
          name: Forest fire model
        GATTR-PARAM: fw_prob, bw_factor, ambs

igraph_simple_interconnected_islands_game:
    R:
        GATTR:
          name: Interconnected islands model
        GATTR-PARAM: islands_n, islands_size, islands_pin, n_inter

igraph_static_fitness_game:
    R:
        GATTR:
          name: Static fitness model
        GATTR-PARAM: loops, multiple

igraph_static_power_law_game:
    R:
        GATTR:
          name: Static power law model
        GATTR-PARAM: exponent_out, exponent_in, loops, multiple, finite_size_correction

igraph_k_regular_game:
    R:
        GATTR:
          name: k-regular graph
        GATTR-PARAM: k

igraph_sbm_game:
    R:
        GATTR:
          name: Stochastic block model
        GATTR-PARAM: loops

igraph_hsbm_game:
    INTERNAL: true
    R:
        GATTR:
          name: Hierarchical stochastic block model
        GATTR-PARAM: m, rho, C, p

igraph_hsbm_list_game:
    INTERNAL: true
    R:
        GATTR:
          name: Hierarchical stochastic block model
        GATTR-PARAM: p

igraph_correlated_game:
    R:
        GATTR:
          name: Correlated random graph
        GATTR-PARAM: corr, p

#######################################
# Basic query functions
#######################################

# Deprecated in C core
igraph_are_connected:
    IGNORE: RR, RC

#######################################
# Structural properties
#######################################

igraph_diameter:
    IGNORE: RR, RC, RInit

igraph_diameter_dijkstra:
    IGNORE: RR, RC, RInit

igraph_distances:
    IGNORE: RR, RC

igraph_distances_cutoff:
    IGNORE: RR, RC

igraph_get_shortest_path_astar:
    IGNORE: RR, RC, Rinit

igraph_get_shortest_paths:
    IGNORE: RR, RC, RInit

igraph_get_all_shortest_paths:
    PARAM_NAMES:
        vertices: vpaths
        edges: epaths

igraph_distances_dijkstra:
    IGNORE: RR, RC

igraph_distances_dijkstra_cutoff:
    IGNORE: RR, RC

igraph_get_shortest_paths_dijkstra:
    IGNORE: RR, RC, RInit

igraph_get_shortest_paths_bellman_ford:
    IGNORE: RR, RC, RInit

igraph_get_all_shortest_paths_dijkstra:
    PARAM_NAMES:
        vertices: vpaths
        edges: epaths

igraph_distances_bellman_ford:
    IGNORE: RR, RC

igraph_distances_johnson:
    IGNORE: RR, RC

igraph_distances_floyd_warshall:
    IGNORE: RR, RC

igraph_voronoi:
    FIRST_KW_PARAM: weights

igraph_get_k_shortest_paths:
    PARAM_ORDER: graph, from, to, *, k, ...
    PARAM_NAMES:
        vertex_paths: vpaths
        edge_paths: epaths

igraph_get_widest_path:
    PARAMS: |-
        GRAPH graph,
        OPTIONAL OUT VERTEX_INDICES vertices, OPTIONAL OUT EDGE_INDICES edges,
        VERTEX from, VERTEX to, EDGEWEIGHTS weights=NULL, NEIMODE mode=OUT
    DEPS: |-
        from ON graph, to ON graph, weights ON graph, vertices ON graph, edges ON graph

igraph_get_widest_paths:
    PARAMS: |-
        GRAPH graph,
        OPTIONAL OUT VERTEXSET_LIST vertices, OPTIONAL OUT EDGESET_LIST edges,
        VERTEX from, VERTEX_SELECTOR to=ALL, EDGEWEIGHTS weights=NULL,
        NEIMODE mode=OUT, OPTIONAL OUT VECTOR_INT parents,
        OPTIONAL OUT VECTOR_INT inbound_edges
    DEPS: |-
        from ON graph, to ON graph, weights ON graph, vertices ON graph,
        edges ON graph

igraph_widest_path_widths_dijkstra:
    PARAMS: |-
        GRAPH graph, OUT MATRIX res, VERTEX_SELECTOR from=ALL,
        VERTEX_SELECTOR to=ALL, EDGEWEIGHTS weights=NULL, NEIMODE mode=OUT
    DEPS: from ON graph, to ON graph, weights ON graph

igraph_widest_path_widths_floyd_warshall:
    PARAMS: |-
        GRAPH graph, OUT MATRIX res, VERTEX_SELECTOR from=ALL,
        VERTEX_SELECTOR to=ALL, EDGEWEIGHTS weights=NULL, NEIMODE mode=OUT
    DEPS: from ON graph, to ON graph, weights ON graph

igraph_spanner:
    DEPS: weights ON graph, spanner ON graph

igraph_subcomponent:
    IGNORE: RR, RC

igraph_betweenness:
    IGNORE: RR, RC

igraph_betweenness_subset:
    DEPS: |-
        vids ON graph, weights ON graph, res ON graph vids, sources ON graph, targets ON graph

igraph_harmonic_centrality:
    IGNORE: RR, RC, RInit
    # This is handled by igraph_harmonic_centrality_cutoff

igraph_pagerank:
    IGNORE: RR, RC, RInit

igraph_personalized_pagerank_vs:
    DEPS: vids ON graph, weights ON graph, vector ON graph vids,
        options ON algo, reset_vids ON graph

igraph_rewire:
    IGNORE: RR, RC

igraph_average_path_length:
    IGNORE: RR, RC, RInit
    # No need for it, igraph_average_path_length_dijkstra takes care of the
    # unweighted case as well

igraph_average_path_length_dijkstra:
    PARAM_NAMES:
        unconn_pairs: unconnected
        unconn: unconnected

igraph_constraint:
    IGNORE: RR, RC

igraph_maxdegree:
    PARAM_ORDER: graph, *, vids, ...
    PARAM_NAMES:
        vids: v

igraph_neighborhood_size:
    IGNORE: RR, RC, RInit

igraph_neighborhood:
    IGNORE: RR, RC, RInit

igraph_neighborhood_graphs:
    IGNORE: RR, RC

igraph_topological_sorting:
    IGNORE: RR, RC

igraph_is_loop:
    PARAM_NAMES:
        es: eids

igraph_is_multiple:
    PARAM_NAMES:
        es: eids

igraph_count_multiple:
    PARAM_NAMES:
        es: eids

igraph_girth:
    IGNORE: RR, RC, RInit

igraph_add_edge:
    IGNORE: RR, RC, RInit

igraph_chung_lu_game:
    PARAMS: |-
        OUT GRAPH graph, VECTOR out_weights, OPTIONAL VECTOR in_weights, *,
        BOOLEAN loops=True, CHUNG_LU_VARIANT variant=ORIGINAL
    R:
      GATTR:
        name: Chung-Lu model
      GATTR-PARAM: variant

igraph_eigenvector_centrality:
    # This is a temporary hack; we need to find a way to handle default values
    # for dependencies. The problem is that the VERTEXINDEX type needs two
    # dependencies: the graph and the vertex set, but we only have the graph
    # in the argument list.
    DEPS: weights ON graph, vector ON graph V(graph)

igraph_hub_score:
    IGNORE: RR, RC

igraph_authority_score:
    IGNORE: RR, RC

igraph_hub_and_authority_scores:
    # This is a temporary hack; we need to find a way to handle default values
    # for dependencies. The problem is that the VERTEXINDEX type needs two
    # dependencies: the graph and the vertex set, but we only have the graph
    # in the argument list.
    DEPS: weights ON graph, hub ON graph V(graph), authority ON graph V(graph)
    PARAMS: GRAPH graph, OUT VERTEX_QTY hub, OUT VERTEX_QTY authority,
        OUT REAL value, BOOLEAN scale=True, OPTIONAL EDGEWEIGHTS weights,
        INOUT ARPACKOPT options=ARPACK_DEFAULTS

igraph_is_mutual:
    PARAM_NAMES:
        es: eids

igraph_is_chordal:
    IGNORE: RR, RC, RInit

# We use igraph_eccentricity_dijkstra instead
igraph_eccentricity:
    IGNORE: RR, RC

igraph_eccentricity_dijkstra:
    PARAM_ORDER: graph, vids, *, weights, ...

# We use igraph_graph_center_dijkstra instead
igraph_graph_center:
    IGNORE: RR, RC

igraph_graph_center_dijkstra:
    FIRST_KW_PARAM: weights

# We use igraph_radius_dijkstra instead
igraph_radius:
    IGNORE: RR, RC

igraph_radius_dijkstra:
    FIRST_KW_PARAM: weights

igraph_pseudo_diameter:
    DEPS: start_vid ON graph

igraph_pseudo_diameter_dijkstra:
    DEPS: start_vid ON graph, weights ON graph

igraph_random_walk:
    PARAM_ORDER: graph, start, steps, ...

igraph_random_edge_walk:
    IGNORE: RR, RC

#######################################
# Degree sequences
#######################################

igraph_is_bigraphical:
    IGNORE: RR, RC, RInit

#######################################
# Visitors
#######################################

igraph_bfs:
    IGNORE: RR, RC, RInit

igraph_bfs_simple:
    DEPS: root ON graph, order ON graph

igraph_dfs:
    IGNORE: RR, RC, RInit

#######################################
# Bipartite graphs
#######################################

# Hack: add NULL default on 'types' parameter. Even though this parameter is not
# optional in the C core, it must be optional in R so that weights can be
# automatically taken from the 'type' edge attribute.
igraph_bipartite_projection_size:
    PARAMS: |-
        GRAPH graph, BIPARTITE_TYPES types=NULL,
        OUT INTEGER vcount1, OUT INTEGER ecount1,
        OUT INTEGER vcount2, OUT INTEGER ecount2
    DEPS: types ON graph

#######################################
# Bipartite graphs
#######################################

igraph_bipartite_projection:
    IGNORE: RR, RC, RInit

igraph_create_bipartite:
    IGNORE: RR

igraph_biadjacency:
    DEPS: types ON res$graph V(res$graph)

# Use the name 'type' instead of 'types' (provided by the C core)
igraph_is_bipartite:
    PARAMS: GRAPH graph, OUT BOOLEAN res, OPTIONAL OUT BIPARTITE_TYPES type
    DEPS: type ON graph V(graph)

igraph_bipartite_game_gnp:
    PARAMS: |-
        OUT GRAPH graph, OPTIONAL OUT BIPARTITE_TYPES_UNNAMED types,
        INTEGER n1, INTEGER n2, REAL p, BOOLEAN directed=False,
        NEIMODE mode=ALL

igraph_bipartite_game_gnm:
    PARAMS: |-
        OUT GRAPH graph, OPTIONAL OUT BIPARTITE_TYPES_UNNAMED types,
        INTEGER n1, INTEGER n2, INTEGER m, BOOLEAN directed=False,
        NEIMODE mode=ALL

igraph_bipartite_game:
    IGNORE: RR, RC

igraph_full_bipartite:
    DEPS: types ON res$graph


#######################################
# Spectral properties
#######################################

#######################################
# Spectral properties
#######################################

#######################################
# Components
#######################################

igraph_decompose:
    IGNORE: RR, RC

#######################################
# Cliques
#######################################

igraph_cliques:
    PARAM_NAMES:
        min_size: min
        max_size: max

igraph_cliques_callback:
    IGNORE: RR, RC, RInit

igraph_clique_size_hist:
    # Wrapper function is hand-rolled in the R layer; the generated version
    # is renamed and internal
    INTERNAL: true

igraph_maximal_cliques:
    IGNORE: RR, RC, RInit

# TODO: temporarily disabled
igraph_maximal_cliques_subset:
    IGNORE: RR, RC

igraph_maximal_cliques_callback:
    IGNORE: RR, RC, RInit

igraph_maximal_cliques_count:
    IGNORE: RR, RC, RInit

igraph_maximal_cliques_file:
    IGNORE: RR, RC, RInit

igraph_maximal_cliques_hist:
    # Wrapper function is hand-rolled in the R layer; the generated version
    # is renamed and internal
    INTERNAL: true

igraph_independent_vertex_sets:
    PARAM_NAMES:
        min_size: min
        max_size: max

igraph_largest_independent_vertex_sets:

igraph_maximal_independent_vertex_sets:

igraph_independence_number:

#######################################
# Layouts
#######################################

igraph_layout_fruchterman_reingold:
    IGNORE: RR, RC, RInit

igraph_layout_kamada_kawai:
    IGNORE: RR, RC, RInit

igraph_layout_lgl:
    IGNORE: RR, RC

igraph_layout_reingold_tilford:
    IGNORE: RR, RC, RInit

igraph_layout_reingold_tilford_circular:
    IGNORE: RR, RC, RInit

igraph_layout_fruchterman_reingold_3d:
    IGNORE: RR, RC, RInit

igraph_layout_kamada_kawai_3d:
    IGNORE: RR, RC, RInit

igraph_layout_graphopt:
    IGNORE: RR, RC, RInit

igraph_layout_drl:
    IGNORE: RR

igraph_layout_drl_3d:
    IGNORE: RR

igraph_layout_merge_dla:
    IGNORE: RR, RC

#######################################
# Cocitation and other similarity measures
#######################################

igraph_cocitation:
    IGNORE: RR, RC

igraph_bibcoupling:
    IGNORE: RR, RC

#######################################
# Community structure
#######################################

igraph_community_spinglass:
    IGNORE: RR, RC, RInit

igraph_community_spinglass_single:
    IGNORE: RR, RC, RInit

igraph_community_walktrap:
    IGNORE: RR, RC, RInit

igraph_community_edge_betweenness:
    IGNORE: RR, RC, RInit

igraph_community_eb_get_merges:
    IGNORE: RR, RC, RInit

igraph_community_fastgreedy:
    IGNORE: RR, RC, RInit

igraph_community_to_membership:
    IGNORE: RR, RC, RInit

igraph_le_community_to_membership:
    IGNORE: RR, RC, RInit

igraph_reindex_membership:
    IGNORE: RR, RC, RInit

igraph_community_leading_eigenvector:
    IGNORE: RR, RC, RInit
    R:
        CLASS: igraph.eigenc

igraph_community_voronoi:
    IGNORE: RR, RC, RInit

#######################################
# Graphlets
#######################################

igraph_graphlets:
    IGNORE: RC

igraph_graphlets_candidate_basis:
    IGNORE: RR, RC

igraph_graphlets_project:
    IGNORE: RR, RC, RInit

#######################################
# Hierarchical random graphs
#######################################
    R:
        CLASS: igraphHRG

igraph_hrg_game:
    R:
      GATTR:
        name: Hierarchical random graph model

igraph_hrg_create:
    R:
        CLASS: igraphHRG

#######################################
# Conversion
#######################################

igraph_get_adjacency:
    IGNORE: RR, RC


igraph_get_edgelist:
    IGNORE: RR, RC

igraph_to_directed:
    PARAMS: INOUT GRAPH graph, TODIRECTED mode=MUTUAL

#######################################
# Read and write foreign formats
#######################################

igraph_read_graph_edgelist:
    IGNORE: RR, RC

igraph_read_graph_ncol:
    IGNORE: RR, RC

igraph_read_graph_lgl:
    IGNORE: RR, RC

igraph_read_graph_pajek:
    IGNORE: RR, RC

igraph_read_graph_graphml:
    IGNORE: RR, RC

# TODO: temporarily disabled
igraph_read_graph_dimacs_flow:
    IGNORE: RR, RC

igraph_read_graph_graphdb:
    IGNORE: RR, RC

igraph_read_graph_gml:
    IGNORE: RR, RC

igraph_read_graph_dl:
    IGNORE: RR, RC

igraph_write_graph_edgelist:
    IGNORE: RR, RC

igraph_write_graph_ncol:
    IGNORE: RR, RC

igraph_write_graph_lgl:
    IGNORE: RR, RC

igraph_write_graph_leda:
    IGNORE: RR, RC

igraph_write_graph_graphml:
    IGNORE: RR, RC

igraph_write_graph_pajek:
    IGNORE: RR, RC

# TODO: temporarily disabled
igraph_write_graph_dimacs_flow:
    IGNORE: RR, RC
    PARAMS: |-
        INOUT GRAPH graph, OUTFILE outstream, VERTEX source=0, VERTEX target=0,
        VECTOR capacity

igraph_write_graph_gml:
    IGNORE: RR, RC

igraph_write_graph_dot:
    IGNORE: RR, RC

#######################################
# Motifs
#######################################

#######################################
# Graph operators
#######################################

igraph_disjoint_union:
    IGNORE: RR, RC, RInit

igraph_disjoint_union_many:
    IGNORE: RR, RC, RInit

igraph_union:
    IGNORE: RR, RC

igraph_union_many:
    IGNORE: RR, RC, RInit

igraph_intersection:
    IGNORE: RR, RC

igraph_intersection_many:
    IGNORE: RR, RC, RInit

igraph_difference:
    IGNORE: RR, RC

igraph_complementer:
    IGNORE: RR, RC

igraph_compose:
    IGNORE: RR, RC, RInit

#######################################
# Maximum flows, minimum cuts
#######################################

igraph_maxflow_value:
    IGNORE: RR, RC, RInit

igraph_mincut:
    IGNORE: RR, RC

igraph_mincut_value:
    IGNORE: RR, RC

igraph_st_mincut_value:
    IGNORE: RR, RC

igraph_st_vertex_connectivity:
    IGNORE: RR, RC, RInit

igraph_vertex_connectivity:
    IGNORE: RR, RC

igraph_st_edge_connectivity:
    IGNORE: RR, RC

igraph_edge_connectivity:
    IGNORE: RR, RC

igraph_edge_disjoint_paths:
    IGNORE: RR, RC

igraph_vertex_disjoint_paths:
    IGNORE: RR, RC

igraph_adhesion:
    IGNORE: RR, RC

igraph_cohesion:
    IGNORE: RR, RC

#######################################
# Listing s-t cuts, separators
#######################################

igraph_cohesive_blocks:
    IGNORE: RR, RC
    R:
        CLASS: cohesiveBlocks

#######################################
# K-Cores
#######################################

igraph_coreness:
    IGNORE: RR, RC

#######################################
# Graph isomorphism
#######################################

# TODO: temporarily disabled
# get_subisomorphisms_vf2_callback_impl gives LTO warnings
# wrong number of arguments to  R_igraph_get_subisomorphisms_vf2_callback()
igraph_get_subisomorphisms_vf2_callback:
    IGNORE: RR, RC

igraph_subisomorphic_lad:
    IGNORE: RR, RC, RInit
    # R function is hand-rolled
    # Despite their names, vertex_color and edge_color are not really colors
    # but _multiplicities_, so we simply use VECTOR_INT there
    PARAMS: |-
        GRAPH graph, OUT GRAPH res, OUT VECTOR_INT vertex_color, OUT VECTOR_INT edge_color

#######################################
# Matching
#######################################

#######################################
# Embedding
#######################################

igraph_adjacency_spectral_embedding:
    IGNORE: RC

igraph_laplacian_spectral_embedding:
    IGNORE: RC

#######################################
# Eigensolvers
#######################################

#######################################
# Fitting power laws
#######################################

#######################################
# Dynamics, on networks
#######################################

igraph_sir:
    R:
        CLASS: sir

#######################################
# Other, not graph related
#######################################

igraph_running_mean:
    IGNORE: RR, RC

igraph_random_sample:
    IGNORE: RR, RC

# Not needed in R
igraph_almost_equals:
    IGNORE: RR, RC

# Not needed in R
igraph_cmp_epsilon:
    IGNORE: RR, RC

# TODO: temporarily disabled
igraph_eigen_matrix:
    IGNORE: RR, RC

# TODO: temporarily disabled
igraph_eigen_matrix_symmetric:
    IGNORE: RR, RC

#######################################
# Finding cycles
#######################################

igraph_simple_cycles_callback:
    IGNORE: RR, RC

#######################################
# Eulerian functions
#######################################

igraph_is_eulerian:
    INTERNAL: true

igraph_eulerian_path:
    PARAM_NAMES:
        edge_res: epath
        vertex_res: vpath

igraph_eulerian_cycle:
    PARAM_NAMES:
        edge_res: epath
        vertex_res: vpath

#######################################
# Cycle bases
#######################################

#######################################
# Trees
#######################################

igraph_is_tree:
    PARAMS: GRAPH graph, PRIMARY OUT BOOLEAN res, OPTIONAL OUT VERTEX_ROOT root, NEIMODE mode=OUT
    DEPS: root ON graph

igraph_from_prufer:
    R:
        GATTR:
          name: Tree from Prufer sequence
        GATTR-PARAM: prufer

igraph_minimum_spanning_tree:
    IGNORE: RR, RC, RInit

igraph_minimum_spanning_tree_unweighted:
    IGNORE: RR, RC

igraph_minimum_spanning_tree_prim:
    IGNORE: RR, RC

igraph_random_spanning_tree:
    PARAMS: GRAPH graph, OUT EDGE_INDICES res, OPTIONAL VERTEX vid=0

#######################################
# Coloring
#######################################

igraph_is_bipartite_coloring:
    PARAMS: GRAPH graph, BIPARTITE_TYPES types, OUT BOOLEAN res, OPTIONAL OUT NULL mode
    DEPS: types ON graph

#######################################
# Microscopic update
#######################################

igraph_moran_process:
    DEPS: weights ON graph, quantities ON graph V(graph), strategies ON graph

#######################################
# Other, (yet) undocumented functions
#######################################

igraph_convergence_degree:
    IGNORE: RR, RC, RInit

# Not needed in R
igraph_has_attribute_table:
    IGNORE: RR, RC

#######################################
# Progress, status handling
#######################################

igraph_progress:
    IGNORE: RR, RC

igraph_status:
    IGNORE: RR, RC

igraph_strerror:
    IGNORE: RR, RC

#######################################
# Other functions, documented, graph related
#######################################

igraph_expand_path_to_pairs:
    IGNORE: RR

igraph_invalidate_cache:
    PARAMS: INOUT GRAPH graph

igraph_vertex_path_from_edge_path:
    DEPS: start ON graph, vertex_path ON graph, edge_path ON graph

#######################################
# Meta info
#######################################

igraph_version:
