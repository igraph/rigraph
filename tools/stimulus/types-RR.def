
GRAPH:
    INCONV: if (!is_igraph(%I%)) { stop("Not a graph object") }

GRAPH_OR_0:    
    INCONV: if (!is.null(graph) && !is_igraph(%I%)) { stop("Not a graph object") }

INTEGER:
    INCONV: %I% <- as.integer(%I%)
    DEFAULT:
      FINEITER: max(10, log2(vcount(graph)))

REAL:
    INCONV: %I% <- as.numeric(%I%)
    DEFAULT:
      ECROSSW: 1.0 - sqrt(density(graph))
      NEDISTW: 0.2 * (1-density(graph))
      ELENW: density(graph) / 10

BOOLEAN:
    INCONV: %I% <- as.logical(%I%)
    DEFAULT:
       True: TRUE
       False: FALSE

VECTOR:
    INCONV: %I% <- as.numeric(%I%)
    DEFAULT:
       AsmDefaultCvec: graph.strength(%I1%, weights=weights)/(vcount(%I1%)-1)

VERTEXINDEX:
    OUTCONV: 
        OUT:  if (igraph_opt("add.vertex.names") && is_named(%I1%)) { \
                names(%I%) <- vertex_attr(%I1%, "name", %I2%) \
              }

VERTEXINDEX_OR_0:
    OUTCONV: 
        OUT:  if (igraph_opt("add.vertex.names") && is_named(%I1%)) { \
                names(%I%) <- vertex_attr(%I1%, "name", %I2%) \
              }

VECTOR_LONG:
    INCONV: %I% <- as.numeric(%I%)

VECTOR_INT:
    INCONV: %I% <- as.integer(%I%)

VECTORM1:
    INCONV: %I% <- as.numeric(%I%)-1

VECTOR_OR_0:
    INCONV: if (!is.null(%I%)) %I% <- as.numeric(%I%)

VECTORM1_OR_0:
    INCONV: if (!is.null(%I%)) %I% <- as.numeric(%I%)-1

VECTOR_LONG_OR_0:
    INCONV: if (!is.null(%I%)) %I% <- as.numeric(%I%)

VECTOR_LONG_M1:
    INCONV: %I% <- as.numeric(%I%)-1

VECTOR_BOOL:
    INCONV: %I% <- as.logical(%I%)

VECTOR_BOOL_OR_0:
    INCONV: if (!is.null(%I%)) %I% <- as.logical(%I%)

MATRIX:
    INCONV: %I% <- as.matrix(structure(as.double(%I%), dim=dim(%I%)))

MATRIX_OR_0:
    INCONV: if (!is.null(%I%)) %I% <- structure(as.double(%I%), dim=dim(%I%))

ARRAY3:
    INCONV: %I% <- structure(as.double(%I%), dim=dim(%I%))

ARRAY3_OR_0:
    INCONV: if (!is.null(%I%)) %I% <- structure(as.double(%I%), dim=dim(%I%))

ATTRIBUTES:

CONNECTEDNESS:
    INCONV: %I% <- switch(igraph.match.arg(%I%), "weak"=1, "strong"=2)
    DEFAULT:
       WEAK: c("weak", "strong")

NEIMODE:
    INCONV: %I% <- switch(igraph.match.arg(%I%), "out"=1, "in"=2, "all"=3, "total"=3)
    DEFAULT:
       ALL: c("all", "out", "in", "total")
       TOTAL: c("total", "out", "in", "all")
       OUT: c("out", "in", "all", "total")
       IN: c("in", "out", "all", "total")

INOUTMODE:
    INCONV: %I% <- switch(igraph.match.arg(%I%), "out"=1, "in"=2)
    DEFAULT:
       OUT: c("out", "in")
       IN: c("in", "out")

TOUNDIRECTED:
    INCONV: %I% <- switch(igraph.match.arg(%I%), "collapse"=1, "each"=0, "mutual"=2)
    DEFAULT:
       COLLAPSE: c("collapse", "each", "mutual")

INTEGERPTR:
    INCONV:
       INOUT: %I% <- as.integer(%I%)

INTEGERPTR_OR_0:
    INCONV:
       INOUT: %I% <- as.integer(%I%)

BOOLEANPTR:

BOOLEANPTR_OR_0:    

REALPTR:
    INCONV:
       INOUT: %I% <- as.numeric(%I%)

REALPTR_OR_0:
    INCONV:
       INOUT: %I% <- as.numeric(%I%)

INT:
    INCONV: %I% <- as.integer(%I%)

VERTEXSET:
    INCONV: %I% <- as.igraph.vs(%I1%, %I%)
    CALL: %I%-1
    DEFAULT:
       ALL: V(%I1%)
    OUTCONV:
        OUT:  if (igraph_opt("return.vs.es")) { \
                %I% <- create_vs(%I1%, %I%) \
              }

VERTEXSET_OR_0:
    INCONV: %I% <- as.igraph.vs(%I1%, %I%)
    CALL: %I%-1
    DEFAULT:
       ALL: V(%I1%)
    OUTCONV:
        OUT:  if (igraph_opt("return.vs.es")) { \
                %I% <- create_vs(%I1%, %I%) \
              }

VERTEXSET_INT:
    INCONV: %I% <- as.igraph.vs(%I1%, %I%)
    CALL: %I%-1
    DEFAULT:
       ALL: V(%I1%)
    OUTCONV:
        OUT:  if (igraph_opt("return.vs.es")) { \
                %I% <- create_vs(%I1%, %I%) \
              }

VERTEX:
    INCONV: %I% <- as.igraph.vs(%I1%, %I%)
    CALL: %I%-1

EDGESET:
    INCONV: %I% <- as.igraph.es(%I1%, %I%)
    CALL: %I%-1
    DEFAULT:
       ALL: E(%I1%)
    OUTCONV:
        OUT:  if (igraph_opt("return.vs.es")) { \
                %I% <- create_es(%I1%, %I%) \
              }

EDGESET_OR_0:
    INCONV: %I% <- as.igraph.es(%I1%, %I%)
    CALL: %I%-1
    DEFAULT:
       ALL: E(%I1%)
    OUTCONV:
        OUT:  if (igraph_opt("return.vs.es")) { \
                %I% <- create_es(%I1%, %I%) \
              }

EDGEWEIGHTS:
    INCONV: if (is.null(%I%) && "weight" %in% edge_attr_names(%I1%)) { \
               %I% <- E(%I1%)$weight \
            } \
            if (!is.null(%I%) && any(!is.na(%I%))) { \
               %I% <- as.numeric(%I%) \
            } else { \
               %I% <- NULL \
            }

VERTEXWEIGHTS:
    INCONV: if (is.null(%I%) && "weight" %in% vertex_attr_names(%I1%)) { \
               %I% <- V(%I1%)$weight \
            } \
            if (!is.null(%I%) && any(!is.na(%I%))) { \
               %I% <- as.numeric(%I%) \
            } else { \
               %I% <- NULL \
            }

EDGECAPACITY:
    INCONV: if (is.null(%I%) && "capacity" %in% edge_attr_names(%I1%)) { \
               %I% <- E(%I1%)$capacity \
            } \
            if (!is.null(%I%) && any(!is.na(%I%))) { \
               %I% <- as.numeric(%I%) \
            } else { \
               %I% <- NULL \
            }


BIPARTITE_TYPES:
    INCONV: if (is.null(%I%) && "type" %in% vertex_attr_names(%I1%)) { \
               %I% <- V(%I1%)$type \
            } \
            if (!is.null(%I%)) { \
              if (!is.logical(%I%)) { \
                warning("vertex types converted to logical") \
              } \
              %I% <- as.logical(%I%) \
              if (any(is.na(%I%))) { \
                stop("`NA' is not allowed in vertex types") \
               } \
            } else { \
               stop("Not a bipartite graph, supply `types' argument") \
            }

BIPARTITE_TYPES_OR_0:
    INCONV: if (is.null(%I%) && "type" %in% vertex_attr_names(%I1%)) { \
               %I% <- V(%I1%)$type \
            } \
            if (!is.null(%I%)) { \
              if (!is.logical(%I%)) { \
                warning("vertex types converted to logical") \
              } \
              %I% <- as.logical(%I%) \
              if (any(is.na(%I%))) { \
                stop("`NA' is not allowed in vertex types") \
               } \
            } else { \
               stop("Not a bipartite graph, supply `types' argument") \
            }

VERTEX_COLOR:
    INCONV: if (missing(%I%)) { \
               if ("color" %in% vertex_attr_names(%I1%)) { \
                 %I% <- V(%I1%)$color \
               } else { \
                 %I% <- NULL \
               } \
            } \
            if (!is.null(%I%)) { \
               %I% <- as.integer(%I%)-1L \
            }

EDGE_COLOR:
    INCONV: if (missing(%I%)) { \
               if ("color" %in% edge_attr_names(%I1%)) { \
                 %I% <- E(%I1%)$color \
               } else { \
                 %I% <- NULL \
               } \
            } \
            if (!is.null(%I%)) { \
               %I% <- as.integer(%I%)-1L \
            }

NULL:
    CALL:
    HEADER:

VECTORLIST:

VECTORLIST_OR_0:

MATRIXLIST:
  INCONV:
    IN: if (!all(sapply(%I%, is.matrix))) { stop("%I is not a list of matrices") }

VECTORLIST_INT_OR_0:

VERTEXSETLIST:
    OUTCONV:
        OUT:  if (igraph_opt("return.vs.es")) { \
                for (i_ in seq_along(%I%)) { \
                  %I%[[i_]] <- create_vs(%I1%, %I%[[i_]]) \
                } \
              }


VERTEXSETLIST_INT:
  INCONV:
    IN: %I% <- lapply(%I%, function(x) as.integer(x)-1L)

VERTEXSETLIST_OR_0:
    OUTCONV:
        OUT:  if (igraph_opt("return.vs.es")) { \
                for (i_ in seq_along(%I%)) { \
                  %I%[[i_]] <- create_vs(%I1%, %I%[[i_]]) \
                } \
              }

EDGESETLIST:
    OUTCONV:
        OUT:  if (igraph_opt("return.vs.es")) { \
                for (i_ in seq_along(%I%)) { \
                  %I%[[i_]] <- create_es(%I1%, %I%[[i_]]) \
                } \
              }

EDGESETLIST_OR_0:
    OUTCONV:
        OUT:  if (igraph_opt("return.vs.es")) { \
                for (i_ in seq_along(%I%)) { \
                  %I%[[i_]] <- create_es(%I1%, %I%[[i_]]) \
                } \
              }

ARPACKOPT:
    INCONV:
      INOUT: %I%.tmp <- arpack_defaults; %I%.tmp[ names(%I%) ] <- %I% ; %I% <- %I%.tmp

DRL_OPTIONS:
    INCONV:
      IN: %I%.tmp <- drl_defaults$default; %I%.tmp [names(%I%)] <- %I%; %I% <- %I%.tmp

STRVECTOR:

BLISSSH:
    INCONV: %I% <- switch(igraph.match.arg(%I%), "f"=0, "fl"=1, "fs"=2, "fm"=3, "flm"=4, "fsm"=5)

BLISSINFO:

ADJLIST:
    INCONV: %I% <- lapply(%I%, function(x) as.integer(x)-1L)

COMMCMP:
    INCONV: %I% <- switch(igraph.match.arg(%I%), "vi"=0, "nmi"=1, \
                          "split.join"=2, "rand"=3, "adjusted.rand"=4)
    DEFAULT:
       VI: c("vi", "nmi", "split.join", "rand", "adjusted.rand")

SUBGRAPH_IMPL:
    INCONV: %I% <- switch(igraph.match.arg(%I%), "auto"=0, "copy_and_delete"=1, "create_from_scratch"=2)
    DEFAULT:
       AUTO: c("auto", "copy_and_delete", "create_from_scratch")

EDGE_ATTRIBUTE_COMBINATION:
    INCONV: %I% <- igraph.i.attribute.combination(%I%)
    DEFAULT: 
       Default: igraph_opt("edge.attr.comb")

VERTEX_ATTRIBUTE_COMBINATION:
    INCONV: %I% <- igraph.i.attribute.combination(%I%)
    DEFAULT: 
       Default: igraph_opt("vertex.attr.comb")

ADD_WEIGHTS:
    INCONV: %I% <- switch(igraph.match.arg(%I%), "no"=0, "yes"=1, "auto"=2)

HRG:
    INCONV: if (is.null(%I%)) { \
            %I% <- list(left=c(), right=c(), prob=c(), edges=c(), \
                        vertices=c()) \
            } \
            %I% <- lapply(%I%[c("left","right","prob","edges","vertices")], \
                          as.numeric)
    DEFAULT:
       Default: NULL

RECIP:
    INCONV: %I% <- switch(igraph.match.arg(%I%), 'default'=0, 'ratio'=1)
    DEFAULT:
       Default: c('default', 'ratio')

SCGMAT:
    INCONV: %I% <- switch(igraph.match.arg(%I%), "symmetric"=1, \
                          "laplacian"=2, "stochastic"=3)
    DEFAULT:
      Default: c("symmetric", "laplacian", "stochastic")

SCGALGO:
    INCONV: %I% <- switch(igraph.match.arg(%I%), "optimum"=1, "interv_km"=2, \
                          "interv"=3, "exact_scg"=4)
    DEFAULT:
      Default: c("optimum", "interv_km", "interv", "exact_scg")

SCGNORM:
    INCONV: %I% <- switch(igraph.match.arg(%I%), "row"=1, "col"=2)
    DEFAULT:
      Default: c("row", "col")

SCGDIR:
    INCONV: %I% <- switch(igraph.match.arg(%I%), "default"=1, "left"=2, "right"=3)
    DEFAULT: 
      Default: c("default", "left", "right")

SPARSEMAT:
    INCONV: require(Matrix); %I% <- as(%I%, "dgCMatrix")

SPARSEMAT_OR_0:
    INCONV: if (!is.null(%I%)) { \
               require(Matrix); %I% <- as(%I%, "dgCMatrix") \
            }

CVECTOR:
    INCONV: %I% <- as.complex(%I%)

CMATRIX:
    INCONV: %I% <- as.matrix(structure(as.complex(%I%), dim=dim(%I%)))

CVECTOR_OR_0:
    if (!is.null(%I%)) { INCONV: %I% <- as.complex(%I%) }

CMATRIX_OR_0:
    if (!is.null(%I%)) { \
       INCONV: %I% <- as.matrix(structure(as.complex(%I%), dim=dim(%I%))) \
    }

PLFIT:

MAXFLOW_STATS:
  CALL:
  HEADER:

EIGENALGO:
    INCONV: %I% <- switch(igraph.match.arg(%I%), "auto"=0, "lapack"=1, \
                          "arpack"=2, "comp_auto"=3, "comp_lapack"=4, \
                          "comp_arpack"=5)
    DEFAULT: 
      ARPACK: c("arpack", "auto", "lapack", "comp_auto", "comp_lapack", "comp_arpack")

EIGENWHICH:
    INCONV: %I%.tmp <- eigen_defaults; \
            %I%.tmp[ names(%I%) ] <- %I% ; %I% <- %I%.tmp
    DEFAULT: 
      Default: list()

EIGENWHICHPOS:
    INCONV: %I% <- switch(igraph.match.arg(%I%), "lm"=0L, "la"=2L, "sa"=3L)
    DEFAULT:
      ASE: c("lm", "la", "sa")

SIRLIST:

PAGERANKALGO:
    INCONV: %I% <- switch(igraph.match.arg(%I%), "power"=0L, "arpack"=1L, \
                          "prpack"=2L)
    DEFAULT:
      PRPACK: c("prpack", "arpack", "power")

PAGERANKOPT:
    INCONV: if (is.null(%I%)) {                         \
              if (%I1% == 0L) {                         \
                %I% <- list(niter=1000, eps=0.001)      \
              } else if (%I1% == 1L) {                  \
                %I% <- arpack_defaults                  \
              } else {                                  \
                %I% <- NULL                             \
              }                                         \
            }

DEPRECATED:
  INCONV: if (!missing(%I%)) { warning("Argument `%I%' is deprecated and has no effect") }
  CALL:

LSETYPE:
  INCONV: %I% <- switch(igraph.match.arg(%I%), \
                        "default"=if (is.directed(%I1%)) 3L else 0L, \
                        "da"=0L, "d-a"=0L, "idad"=1L, "i-dad"=1L, "dad"=2L, \
                        "oap"=3L)
  DEFAULT:
    Default: c("default", "D-A", "DAD", "I-DAD", "OAP")

RWSTUCK:
  INCONV: %I% <- switch(igraph.match.arg(%I%), "error" = 0L, "return" = 1L)
  DEFAULT:
    RETURN: c("return", "error")
