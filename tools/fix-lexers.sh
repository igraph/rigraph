#!/bin/bash
#
# Fixes the lexers generated by bison/flex so they don't have exit()
# statements (which we won't hit anyway)

set -e

for fname in src/core/io/*-lexer.c; do
    # Remove unused exit points from the lexer
    cat ${fname} | grep -v '^\s*exit.*YY_EXIT_FAILURE' >${fname}.new
    mv ${fname}.new ${fname}

    # Remove 'noreturn' declaration from exit points
	sed -e 's/^\([^#]*\)yynoreturn /\1__attribute__((unused)) /g' ${fname} >${fname}.new
    mv ${fname}.new ${fname}

    # flex on Ubuntu 20.04 generates 'int yyget_leng'; flex on macOS generates
    # 'yy_size_t yyget_leng'. We need to be consistent as we also declare
    # yyget_leng ourselves in the parser and we use yy_size_t there
    cat ${fname} | sed -e 's/int yyget_leng/yy_size_t yyget_leng/g' >${fname}.new
    mv ${fname}.new ${fname}
done

for fname in src/core/io/*-lexer.c src/core/io/*-parser.c; do
    # the CMake build system puts the generated parsers in build/core/io/parsers.
	# Here it is easier to put stuff in src/core/io so we rewrite the includes
    cat ${fname} | sed -e 's,io/parsers/,io/,g' >${fname}.new
    mv ${fname}.new ${fname}
done

for fname in src/core/io/*-parser.c; do
	# Bison 3.8.2 (and maybe other versions) refer to #include yy.tab.h in the
	# generated file; we need to replace this with the real header name
    header=`basename ${fname} .c`.h
    cat ${fname} | sed -e 's,^#include.*yy.tab.h.*$,#include "io/'"${header}"'",g' >${fname}.new
    mv ${fname}.new ${fname}
done

