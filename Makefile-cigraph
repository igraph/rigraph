########################################################
# Configuration variables

PYTHON ?= python3
PYVENV ?= .venv
STIMULUS ?= $(PYVENV)/bin/stimulus
DOCKER ?= docker run --rm --platform linux/amd64 -v $$(pwd):/root/workspace ghcr.io/cynkra/rig-ubuntu-igraph:main

all: pre_build

########################################################
# Main package

top_srcdir=src/vendor/cigraph
vendored_srcdir=$(top_srcdir)
VERSION=$(shell tools/getversion.sh)

# We put the version number in a file, so that we can detect
# if it changes

version_number: force
	@echo '$(VERSION)' | cmp -s - $@ || echo '$(VERSION)' > $@

# Files generated by flex/bison

PARSER := $(shell cd $(top_srcdir) ; git ls-files --full-name src | \
	    grep -E '\.(l|y)$$')
PARSER1 := $(patsubst src/%.l, src/%.c, $(PARSER))
PARSER2 := $(patsubst src/%.y, src/%.c, $(PARSER1))

YACC=$(DOCKER) bison -b yy -d
LEX=$(DOCKER) flex

%.c: %.y
	$(YACC) $< -o src/vendor/io/$(notdir $@)
	mv -f src/vendor/io/$(basename $(notdir $@)).h src/vendor/io/parsers/$(basename $(notdir $@)).h

%.c: %.l
	$(LEX) -o src/vendor/io/$(notdir $@) --header-file=src/vendor/io/parsers/$(basename $(notdir $@)).h $<

# Create Python virtualenv for Stimulus

venv: $(PYVENV)/stamp

$(PYVENV)/stamp: tools/build-requirements.txt
	$(PYTHON) -m venv $(PYVENV)
	$(PYVENV)/bin/pip install -r $<
	touch $(PYVENV)/stamp

# Apply possible patches

patches: $(CORESRC) $(VENDORSRC) $(CINC) $(PARSER2)
	-rm -f src/*.orig
	tools/fix-lexers.sh

# C files generated by C configure

CGEN = src/vendor/igraph_export.h src/vendor/igraph_threading.h src/vendor/igraph_version.h src/sources.mk

src/vendor/igraph_export.h: tools/stimulus/igraph_export.h
	cp $< $@

src/vendor/igraph_threading.h: $(top_srcdir)/include/igraph_threading.h.in
	mkdir -p src
	sed 's/#cmakedefine01 IGRAPH_THREAD_SAFE/#define IGRAPH_THREAD_SAFE 0/g' $< >$@

# Create sources.mk

src/sources.mk:
	$(PYTHON) rconfigure.py

# R source and doc files

RSRC := $(shell git ls-files R doc inst demo NEWS cleanup.win configure.win)

# ARPACK Fortran sources

ARPACK := $(shell git ls-files vendor/arpack)
ARPACK2 := $(patsubst vendor/arpack/%, src/vendor/arpack/%, $(ARPACK))

$(ARPACK2): src/vendor/arpack/%: vendor/arpack/%
	mkdir -p $(@D) && cp $< $@

# libuuid

UUID := $(shell git ls-files vendor/uuid)
UUID2 := $(patsubst vendor/uuid/%, src/vendor/uuid/%, $(UUID))

$(UUID2): src/vendor/uuid/%: vendor/uuid/%
	mkdir -p $(@D) && cp $< $@

# Simpleraytracer

RAY := $(shell git ls-files vendor/simpleraytracer)
RAY2 := $(patsubst vendor/simpleraytracer/%, src/vendor/simpleraytracer/%, $(RAY))

$(RAY2): src/vendor/%: vendor/%
	mkdir -p $(@D) && cp $< $@

# R files that are generated/copied

RGEN = R/aaa-auto.R src/rinterface.c \
	configure src/config.h.in

# Files generated by stimulus

src/rinterface.c: \
		venv \
		$(vendored_srcdir)/interfaces/functions.yaml \
		$(vendored_srcdir)/interfaces/types.yaml \
		tools/stimulus/rinterface.c.in  \
		tools/stimulus/functions-R.yaml \
		tools/stimulus/types-RC.yaml
	$(STIMULUS) \
           -f $(vendored_srcdir)/interfaces/functions.yaml \
           -f tools/stimulus/functions-R.yaml \
           -i tools/stimulus/rinterface.c.in \
           -o src/rinterface.c \
           -t $(vendored_srcdir)/interfaces/types.yaml \
           -t tools/stimulus/types-RC.yaml \
           -l RC

R/aaa-auto.R: \
		venv \
		$(vendored_srcdir)/interfaces/functions.yaml \
		$(vendored_srcdir)/interfaces/types.yaml \
		tools/stimulus/aaa-auto.R.in \
		tools/stimulus/functions-R.yaml \
		tools/stimulus/types-RR.yaml
	$(STIMULUS) \
           -f $(vendored_srcdir)/interfaces/functions.yaml \
           -f tools/stimulus/functions-R.yaml \
           -i tools/stimulus/aaa-auto.R.in \
           -o R/aaa-auto.R \
           -t $(vendored_srcdir)/interfaces/types.yaml \
           -t tools/stimulus/types-RR.yaml \
           -l RR

# This is the list of all object files in the R package,
# we write it to a file to be able to depend on it.
# Makevars.in, Makevars.win and Makevars.ucrt are only regenerated if
# the list of object files changes.

OBJECTS := $(shell echo $(CORESRC) $(VENDORSRC) $(ARPACK) $(RAY) $(UUID) | \
		tr ' ' '\n' | \
        grep -E '\.(c|cpp|cc|f|l|y)$$' | \
		sed 's/\.[^\.][^\.]*$$/.o/' | \
		sed 's,^src/,,' \
		) rinterface.o rinterface_extra.o rrandom.o lazyeval.o init.o cpp11.o cpprinterface.o

object_files: force
	@echo '$(OBJECTS)' | cmp -s - $@ || echo '$(OBJECTS)' > $@

pre_build: venv patches $(RSRC) \
	$(CGEN) $(RGEN) $(RAY2) $(ARPACK2) $(UUID2) \
	$(PARSER2)

clean:
	rm -rf src/core src/vendor src/include src/config.h.in src/rinterface.c R/aaa-auto.R
	git -C $(top_srcdir) reset --hard

.PHONY: all igraph force clean check check-cran check-rhub check-links install test src/sources.mk

.NOTPARALLEL:
